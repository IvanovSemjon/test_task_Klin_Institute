name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_USER: postgres
          POSTGRES_DB: hr_workers_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run migrations
      run: poetry run python manage.py migrate
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: True
        DB_NAME: hr_workers_db
        DB_USER: postgres
        DB_PASSWORD: postgres123
        DB_HOST: localhost
        DB_PORT: 5432
    
    - name: Run tests
      run: poetry run python manage.py test
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: True
        DB_NAME: hr_workers_db
        DB_USER: postgres
        DB_PASSWORD: postgres123
        DB_HOST: localhost
        DB_PORT: 5432
    
    - name: Run linting
      run: poetry run black --check .
      continue-on-error: true